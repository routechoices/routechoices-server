"""
Django settings for routechoices project.

Generated by 'django-admin startproject' using Django 2.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os

from routechoices.slug_blacklist import SLUG_BLACKLIST

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "your-secret-key"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]


AUTHENTICATION_BACKENDS = (
    # Needed to login by username in Django admin, regardless of `allauth`
    "django.contrib.auth.backends.ModelBackend",
    # `allauth` specific authentication methods, such as login by e-mail
    "allauth.account.auth_backends.AuthenticationBackend",
)

DEFAULT_AUTO_FIELD = "django.db.models.AutoField"

# Application definition

INSTALLED_APPS = [
    "routechoices",
    "routechoices.core",
    "routechoices.site",
    "routechoices.lib",
    "django_bootstrap5",
    "django_hosts",
    "corsheaders",
    "user_sessions",
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "invitations",
    "background_task",
    "admincommand",
    "oauth2_provider",
    "rest_framework",
    "drf_yasg",
    "markdownify.apps.MarkdownifyConfig",
    "django_s3_storage",
    "qr_code",
    "kagi",
    "compressor",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",
    "django.contrib.sitemaps",
]

MIDDLEWARE = [
    "routechoices.core.middleware.SessionMiddleware",
    "routechoices.core.middleware.HostsRequestMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "routechoices.core.middleware.XForwardedForMiddleware",
    "routechoices.core.middleware.FilterCountriesIPsMiddleware",
    "routechoices.core.middleware.CorsMiddleware",
    "csp.middleware.CSPMiddleware",
    "django.middleware.common.CommonMiddleware",
    "routechoices.core.middleware.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]


SESSION_ENGINE = "user_sessions.backends.db"

ROOT_URLCONF = "routechoices.urls"
ROOT_HOSTCONF = "routechoices.hosts"
DEFAULT_HOST = "www"
PARENT_HOST = "routechoices.dev"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "OPTIONS": {
            "loaders": [
                "django.template.loaders.filesystem.Loader",
                "django.template.loaders.app_directories.Loader",
            ],
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "routechoices.lib.context_processors.site",
            ],
        },
    },
]

WSGI_APPLICATION = "routechoices.wsgi.application"


DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": "app_db",
        "USER": "app_user",
        "PASSWORD": "changeme",
        "HOST": "db",
        "PORT": "",
        "OPTIONS": {
            "server_side_binding": True,
        },
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": (
            "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"
        ),
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

TIME_ZONE = "UTC"

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

SITE_ID = 1

STATIC_URL = "/static/"

STATIC_ROOT = os.path.join(BASE_DIR, "static")
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static_assets"),
]
STATICFILES_FINDERS = [
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
    "compressor.finders.CompressorFinder",
]

MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

LOGIN_URL = "https://routechoices.dev/login"
REDIRECT_ALLOWED_DOMAINS = ["api.routechoices.dev", "www.routechoices.dev"]
LOGIN_REDIRECT_URL = "/dashboard"
LOGOUT_REDIRECT_URL = "/"

SESSION_COOKIE_DOMAIN = ".routechoices.dev"
SESSION_COOKIE_SAMESITE = None

CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True

REST_FRAMEWORK = {
    "DEFAULT_RENDERER_CLASSES": [
        "drf_orjson_renderer.renderers.ORJSONRenderer",
        "rest_framework.renderers.BrowsableAPIRenderer",
    ],
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 20,
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "oauth2_provider.contrib.rest_framework.OAuth2Authentication",
        "rest_framework.authentication.SessionAuthentication",
        "rest_framework.authentication.BasicAuthentication",
    ),
}

ACCOUNT_ADAPTER = "routechoices.lib.account_adapters.SiteAccountAdapter"
ACCOUNT_AUTHENTICATION_METHOD = "username_email"
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = "none"
ACCOUNT_DEFAULT_HTTP_PROTOCOL = "http"
ACCOUNT_USERNAME_BLACKLIST = SLUG_BLACKLIST
ACCOUNT_USERNAME_REQUIRED = True
ACCOUNT_USERNAME_MIN_LENGTH = "2"
ACCOUNT_USERNAME_VALIDATORS = "routechoices.lib.validators.custom_username_validators"
ACCOUNT_FORMS = {"reset_password": "routechoices.site.forms.ResetPasswordForm"}

EMAIL_HOST = "smtp"
EMAIL_PORT = 1025

CACHES = {
    "default": {
        "BACKEND": "diskcache.DjangoCache",
        "LOCATION": os.path.join(BASE_DIR, "cache"),
        "TIMEOUT": 300,
        # ^-- Django setting for default timeout of each key.
        "SHARDS": 4,
        "DATABASE_TIMEOUT": 0.10,  # 10 milliseconds
        # ^-- Timeout for each DjangoCache database transaction.
        "OPTIONS": {"size_limit": 2**30},  # 1 gigabyte
    },
}

CACHE_TILES = True
CACHE_THUMBS = True
CACHE_EVENT_DATA = True

TMT250_PORT = 2000
MICTRACK_PORT = 2001
QUECLINK_PORT = 2002
TRACKTAPE_PORT = 2003

# The AWS access key to use.
AWS_ACCESS_KEY_ID = "minio"
# The AWS secret access key to use.
AWS_SECRET_ACCESS_KEY = "minio123"
# The optional AWS session token to use.
AWS_SESSION_TOKEN = ""
AWS_S3_ENDPOINT_URL = "http://minio:9000"
AWS_S3_BUCKET = "routechoices"

GEOIP_PATH = os.path.join(BASE_DIR, "geoip")

SILENCED_SYSTEM_CHECKS = ["admin.E410"]

PATREON_CREATOR_ID = "xRJAgEV1zma3MfnaVGg9SRTYet-EUTKqn4O2Llz6_lk"

MARKDOWNIFY = {
    "default": {
        "WHITELIST_TAGS": [
            "h1",
            "h2",
            "h3",
            "h4",
            "img",
            "a",
            "abbr",
            "acronym",
            "b",
            "blockquote",
            "em",
            "i",
            "li",
            "ol",
            "p",
            "strong",
            "ul",
            "br",
            "code",
        ],
        "WHITELIST_ATTRS": [
            "href",
            "src",
            "alt",
            "style",
        ],
        "WHITELIST_STYLES": [
            "color",
            "width",
            "height",
            "font-weight",
        ],
    }
}

USE_X_FORWARDED_HOST = True
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

OAUTH2_PROVIDER = {
    # this is the list of available scopes
    "SCOPES": {"all": "Read and Write data"}
}

SWAGGER_SETTINGS = {
    "SECURITY_DEFINITIONS": {
        "Basic": {"type": "basic"},
        "OAuth2": {
            "type": "oauth2",
            "authorizationUrl": "/oauth2/authorize/",
            "tokenUrl": "/oauth2/token/",
            "flow": "accessCode",
            "scopes": {
                "full": "Read and Write data",
            },
        },
    }
}

EMAIL_CUSTOMER_SERVICE = "support@routechoices.dev"

LIVESTREAM_INTERNAL_SECRET = "<change-me>"

POST_LOCATION_SECRETS = ["<replace-me>"]

XFF_TRUSTED_PROXY_DEPTH = 1

CSP_DEFAULT_SRC = (
    "'self'",
    "www.routechoices.dev",
    "api.routechoices.dev",
    "data.routechoices.dev",
    "www.routechoices.com",
    "api.routechoices.com",
    "nominatim.openstreetmap.org",
    "data:",
)
CSP_STYLE_SRC = ("'self'", "'unsafe-inline'")
CSP_IMG_SRC = (
    "'self'",
    "*",
    "data:",
    "blob:",
)
CSP_WORKER_SRC = ("'self'", "blob:")
CSP_CHILD_SRC = ("'self'", "blob:")

CSRF_TRUSTED_ORIGINS = [
    "https://*.routechoices.dev",
]
CSRF_USE_SESSIONS = True

COMPRESS_ENABLED = True
COMPRESS_OFFLINE = True

ANALYTICS_API_KEY = ""
ANALYTICS_API_URL = "https://analytics.routechoices.com/api/v1"

SECURE_CROSS_ORIGIN_OPENER_POLICY = None

RELYING_PARTY_ID = "routechoices.dev"
RELYING_PARTY_NAME = "Routechoices.dev"

try:
    from .local_settings import *  # noqa: F403, F401
except ImportError:
    pass
